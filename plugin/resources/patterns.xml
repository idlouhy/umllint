<?xml version="1.0" encoding="UTF-8" standalone="no"?><patterns><pattern><id>6</id><name>InterfaceDoesNotStartWithI</name><title>Interface Does Not Start With I</title><category id="2" name="custom">Custom</category><severity id="3" name="info">Info</severity><reference citation="" id="3" name="custom">Custom</reference><description/><code>  top relation InterfaceDoesNotStartWithI {   &#13;
&#13;
    checkonly domain source _interface:Interface {&#13;
      name = _name:String {}&#13;
    };&#13;
&#13;
    enforce domain target _pattern : umllint::Pattern {&#13;
      id = '6',&#13;
      name = 'InterfaceDoesNotStartWithI',&#13;
      binding = _binding1 : umllint::Binding {&#13;
        name = _interface.name,&#13;
        element = _interface    &#13;
      }&#13;
    }; &#13;
    &#13;
    when {&#13;
      not(_name.startsWith('I'));&#13;
    }   &#13;
  }</code></pattern><pattern><id>9</id><name>ClassHasEmptyName</name><title>Class Has Empty Name</title><category id="2" name="custom">Custom</category><severity id="3" name="info">Info</severity><reference citation="" id="3" name="custom">Custom</reference><description/><code>    top relation ClassHasEmptyName {   &#13;
&#13;
    checkonly domain source _class:uml::Class {&#13;
      name = _name:String {}&#13;
    };&#13;
&#13;
    enforce domain target _pattern : umllint::Pattern {&#13;
      id = '9',&#13;
      name = 'ClassHasEmptyName',&#13;
      binding = _binding1 : umllint::Binding {&#13;
        name = _name,&#13;
        element = _class    &#13;
      }&#13;
    };&#13;
&#13;
    when {&#13;
      _name = '';&#13;
    }    &#13;
    &#13;
  }&#13;
  </code></pattern><pattern><id>12</id><name>CommentReferencesNonOwner </name><title>Comment References Non Owner </title><category id="7" name="convention-anti-patterns">Convention Anti-Patterns</category><severity id="2" name="warning">Warning</severity><reference citation="Elaasar, M., Briand, L. and Labiche Y., &quot;Metamodeling Anti-Patterns&quot;, 2010." id="1" name="mmap">Metamodeling Anti-Patterns</reference><description>Association Class Hierarchy Pattern&#13;
&#13;
Problem : An Interleaved-Association-Generalization sequence from an association class to one of its associate classes might introduce a finite satisfiability.&#13;
&#13;
http://www.cs.bgu.ac.il/~cd-patterns/?page_id=166</description><code>top relation CommentReferencesNonOwner {&#13;
&#13;
    checkonly domain source _comment:Comment {&#13;
        owner = _owner:Element{},&#13;
        annotatedElement = _reference:Element{}&#13;
    };&#13;
    &#13;
    enforce domain target _pattern : umllint::Pattern {&#13;
      id = '12',&#13;
      name = 'CommentReferencesNonOwner',&#13;
      binding = _binding1 : umllint::Binding {&#13;
        name = _comment.body,&#13;
        element = _comment    &#13;
      }&#13;
    };&#13;
    &#13;
   checkonly domain source _comment:Comment {&#13;
        owner = _owner:Element{},&#13;
        annotatedElement = _reference:Element{}&#13;
    };  &#13;
 &#13;
}&#13;
</code></pattern><pattern><id>40</id><name>ClassifierNameIsPartOfGeneralName</name><title>Classifier Name Is Part Of General Name</title><category id="7" name="convention-anti-patterns">Convention Anti-Patterns</category><severity id="2" name="warning">Warning</severity><reference citation="Elaasar, M., Briand, L. and Labiche Y., &quot;Metamodeling Anti-Patterns&quot;, 2010." id="1" name="mmap">Metamodeling Anti-Patterns</reference><description/><code>top relation ClassifierNameIsPartOfGeneralName {&#13;
&#13;
    checkonly domain source _specific:Classifier {&#13;
        name = _specificName:String {},&#13;
        general = _general:Classifier {&#13;
            name = _generalName:String {}&#13;
        }&#13;
    };&#13;
    &#13;
    enforce domain target _pattern : umllint::Pattern {&#13;
      id = '40',&#13;
      name = 'ClassifierNameIsPartOfGeneralName',&#13;
      binding = _binding : umllint::Binding {&#13;
        name = _specific.name,&#13;
        element = _specific    &#13;
      }&#13;
    };&#13;
&#13;
    when {&#13;
        _specificName.size() &lt; _generalName.size();&#13;
        _generalName.substring(_generalName.size()-_specificName.size()+1, _generalName.size()) = _specificName;&#13;
    }&#13;
}</code></pattern><pattern><id>41</id><name>OperationHasReturnParameterNotNamedResult</name><title>Operation Has Return Parameter Not Named Result</title><category id="7" name="convention-anti-patterns">Convention Anti-Patterns</category><severity id="2" name="warning">Warning</severity><reference citation="Elaasar, M., Briand, L. and Labiche Y., &quot;Metamodeling Anti-Patterns&quot;, 2010." id="1" name="mmap">Metamodeling Anti-Patterns</reference><description/><code>top relation OperationHasReturnParameterNotNamedResult {&#13;
&#13;
    checkonly domain source _operation:Operation {&#13;
        ownedParameter = _parameter:Parameter {&#13;
            direction = ParameterDirectionKind::return&#13;
        }&#13;
    };&#13;
    &#13;
    enforce domain target _pattern : umllint::Pattern {&#13;
      id = '41',&#13;
      name = 'OperationHasReturnParameterNotNamedResult',&#13;
      binding = _binding : umllint::Binding {&#13;
        name = _operation.name,&#13;
        element = _operation    &#13;
      }&#13;
    };&#13;
&#13;
    when {&#13;
        _parameter.name-&gt;isEmpty() or _parameter.name &lt;&gt; 'result';&#13;
    }&#13;
}</code></pattern><pattern><id>42</id><name>ParameterIsBooleanButDoesNotStartWithIs</name><title>Parameter Is Boolean But Does Not Start With Is</title><category id="7" name="convention-anti-patterns">Convention Anti-Patterns</category><severity id="2" name="warning">Warning</severity><reference citation="Elaasar, M., Briand, L. and Labiche Y., &quot;Metamodeling Anti-Patterns&quot;, 2010." id="1" name="mmap">Metamodeling Anti-Patterns</reference><description/><code>top relation ParameterIsBooleanButDoesNotStartWithIs {&#13;
&#13;
    checkonly domain source _parameter:Parameter {&#13;
        type = _type:PrimitiveType {&#13;
            name = 'Boolean'&#13;
        }&#13;
    };&#13;
&#13;
    enforce domain target _pattern : umllint::Pattern {&#13;
      id = '42',&#13;
      name = 'ParameterIsBooleanButDoesNotStartWithIs',&#13;
      binding = _binding : umllint::Binding {&#13;
        name = _parameter.name,&#13;
        element = _parameter    &#13;
      }&#13;
    };&#13;
&#13;
    when {&#13;
        _parameter.direction &lt;&gt; ParameterDirectionKind::return;&#13;
        _parameter.name-&gt;isEmpty() or &#13;
        _parameter.name.size() &lt; 2 or &#13;
        _parameter.name.substring(1,2) &lt;&gt; 'is';&#13;
    }&#13;
}</code></pattern><pattern><id>43</id><name>PropertyIsBooleanButDoesNotStartWithIs</name><title>Property Is Boolean But Does Not Start With Is</title><category id="7" name="convention-anti-patterns">Convention Anti-Patterns</category><severity id="2" name="warning">Warning</severity><reference citation="Elaasar, M., Briand, L. and Labiche Y., &quot;Metamodeling Anti-Patterns&quot;, 2010." id="1" name="mmap">Metamodeling Anti-Patterns</reference><description/><code>top relation PropertyIsBooleanButDoesNotStartWithIs {&#13;
&#13;
    checkonly domain source _property:Property {&#13;
        type = _type:PrimitiveType {&#13;
            name = 'Boolean'&#13;
        }&#13;
    };&#13;
    &#13;
    enforce domain target _pattern : umllint::Pattern {&#13;
      id = '43',&#13;
      name = 'PropertyIsBooleanButDoesNotStartWithIs',&#13;
      binding = _binding : umllint::Binding {&#13;
        name = _property.name,&#13;
        element = _property    &#13;
      }&#13;
    };&#13;
    &#13;
    when {&#13;
        _property.namespace.name &lt;&gt; 'LiteralBoolean';&#13;
        _property.name-&gt;isEmpty() or &#13;
        _property.name.size() &lt; 2 or &#13;
        _property.name.substring(1,2) &lt;&gt; 'is';&#13;
    }&#13;
}</code></pattern><pattern><id>49</id><name>AbstractClassHasNoAbstract</name><title>Abstract Class Has No Abstract</title><category id="2" name="custom">Custom</category><severity id="2" name="warning">Warning</severity><reference citation="" id="3" name="custom">Custom</reference><description/><code>   top relation AbstractClassHasNoAbstract{   &#13;
&#13;
    checkonly domain source _class:Class {&#13;
      name = _name:String {},&#13;
      isAbstract = true      &#13;
    };&#13;
&#13;
    enforce domain target _pattern : umllint::Pattern {&#13;
      id = '49',&#13;
      name = 'AbstractClassHasNoAbstract',&#13;
      binding = _binding1 : umllint::Binding {&#13;
        name = _class.name,&#13;
        element = _class    &#13;
      }&#13;
    }; &#13;
    &#13;
    when {&#13;
      not(_name.startsWith('Abstract'));&#13;
    }   &#13;
  }</code></pattern><pattern><id>54</id><name>PropertyIsDerivedUnionButNotDerived</name><title>Property Is Derived Union But Not Derived</title><category id="1" name="default">Default</category><severity id="1" name="error">Error</severity><reference citation="Elaasar, M., Briand, L. and Labiche Y., &quot;Metamodeling Anti-Patterns&quot;, 2010." id="1" name="mmap">Metamodeling Anti-Patterns</reference><description/><code>top relation PropertyIsDerivedUnionButNotDerived {&#13;
&#13;
  checkonly domain source _property:Property {&#13;
    isDerivedUnion = true,&#13;
    isDerived = false&#13;
  };&#13;
&#13;
  enforce domain target _pattern : umllint::Pattern {&#13;
    id = '54',&#13;
    name = 'PropertyIsDerivedUnionButNotDerived',&#13;
    binding = _binding1 : umllint::Binding {&#13;
      name = _property.name,&#13;
      element = _property&#13;
    }&#13;
  };&#13;
}&#13;
</code></pattern><pattern><id>55</id><name>OperationIsQueryWithNoReturnParameter</name><title>OperationIsQueryWithNoReturnParameter</title><category id="1" name="default">Default</category><severity id="1" name="error">Error</severity><reference citation="Elaasar, M., Briand, L. and Labiche Y., &quot;Metamodeling Anti-Patterns&quot;, 2010." id="1" name="mmap">Metamodeling Anti-Patterns</reference><description/><code>top relation OperationIsQueryWithNoReturnParameter {&#13;
&#13;
    checkonly domain source _operation:Operation {&#13;
      ownedParameter = _parameter : Parameter {&#13;
        direction = _direction : ParameterDirectionKind {}&#13;
      },&#13;
      isQuery = true&#13;
    };&#13;
&#13;
  enforce domain target _pattern : umllint::Pattern {&#13;
    id = '55',&#13;
    name = 'OperationIsQueryWithNoReturnParameter',&#13;
    binding = _binding1 : umllint::Binding {&#13;
      name = _operation.name,&#13;
      element = _operation&#13;
    }&#13;
  };&#13;
&#13;
  when {&#13;
    _direction &lt;&gt; ParameterDirectionKind::return;&#13;
  }&#13;
}</code></pattern><pattern><id>56</id><name>OperationHasMoreThanOneReturnParameter</name><title>OperationHasMoreThanOneReturnParameter</title><category id="1" name="default">Default</category><severity id="1" name="error">Error</severity><reference citation="Elaasar, M., Briand, L. and Labiche Y., &quot;Metamodeling Anti-Patterns&quot;, 2010." id="1" name="mmap">Metamodeling Anti-Patterns</reference><description/><code>top relation OperationHasMoreThanOneReturnParameter {&#13;
&#13;
    checkonly domain source _operation:Operation {&#13;
        ownedParameter = _parameter:Parameter {&#13;
            direction = ParameterDirectionKind::return&#13;
        },&#13;
        ownedParameter = _otherParameter:Parameter {&#13;
            direction = ParameterDirectionKind::return&#13;
        }&#13;
    };&#13;
&#13;
  enforce domain target _pattern : umllint::Pattern {&#13;
    id = '56',&#13;
    name = 'OperationHasMoreThanOneReturnParameter',&#13;
    binding = _binding1 : umllint::Binding {&#13;
      name = _operation.name,&#13;
      element = _operation&#13;
    }&#13;
  };&#13;
    when {&#13;
        _parameter &lt;&gt; _otherParameter;&#13;
    }&#13;
}&#13;
</code></pattern><pattern><id>58</id><name>MultiplicityElementHasNegativeLowerBound</name><title>MultiplicityElementHasNegativeLowerBound</title><category id="1" name="default">Default</category><severity id="1" name="error">Error</severity><reference citation="Elaasar, M., Briand, L. and Labiche Y., &quot;Metamodeling Anti-Patterns&quot;, 2010." id="1" name="mmap">Metamodeling Anti-Patterns</reference><description/><code>top relation MultiplicityElementHasNegativeLowerBound {&#13;
&#13;
    checkonly domain source _element:MultiplicityElement {};&#13;
&#13;
      enforce domain target _pattern : umllint::Pattern {&#13;
        id = '58',&#13;
        name = 'MultiplicityElementHasNegativeLowerBound',&#13;
        binding = _binding1 : umllint::Binding {&#13;
          name = 'multiplicity',&#13;
          element = _element&#13;
        }&#13;
      };&#13;
&#13;
    when {&#13;
        _element.lower &lt; 0;&#13;
    }&#13;
}</code></pattern></patterns>